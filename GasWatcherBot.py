import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

# –•—Ä–∞–Ω–∏–º –ø–æ—Ä–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_thresholds = {}

# –§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.start()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–∞–∑–∞
def get_gas_price():
    url = f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}"
    try:
        response = requests.get(url, timeout=10).json()
        return int(response["result"]["ProposeGasPrice"])
    except:
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def check_gas_thresholds(application):
    gas_price = get_gas_price()
    if gas_price is None:
        return

    for user_id, threshold in list(user_thresholds.items()):
        if gas_price <= threshold:
            try:
                await application.bot.send_message(
                    chat_id=user_id,
                    text=f"üö® –ì–∞–∑ —É–ø–∞–ª –¥–æ {gas_price} Gwei ‚Äî —ç—Ç–æ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç–≤–æ–µ–º—É –ø–æ—Ä–æ–≥—É ({threshold} Gwei)!"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            # –£–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
            user_thresholds.pop(user_id)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /set <—á–∏—Å–ª–æ> —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –≥–∞–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n–ù–∞–ø–∏—à–∏ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.")

async def gas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gas_price = get_gas_price()
    if gas_price is not None:
        await update.message.reply_text(f"üí® –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: {gas_price} Gwei")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≥–∞–∑–∞ üòì")

async def set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        threshold = int(context.args[0])
        user_thresholds[update.effective_user.id] = threshold
        await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold} Gwei. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≥–∞–∑ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø–æ—Ä–æ–≥ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /set 20")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_thresholds.pop(update.effective_user.id, None)
    await update.message.reply_text("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("gas", gas))
    app.add_handler(CommandHandler("set", set_threshold))
    app.add_handler(CommandHandler("cancel", cancel))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫
    scheduler.add_job(lambda: app.create_task(check_gas_thresholds(app)), "interval", seconds=60)

    app.run_polling()

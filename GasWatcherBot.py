from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import os

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞
BOT_TOKEN = "7812855786:AAFx5Vc4qELbUJcBHBVkjy1tcaeB_gvSk2s"

# Etherscan API (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á)
ETHERSCAN_API_KEY = "DBURNPNEDHGJNZUCMUARRHIWZSA7656U3R"  # –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ –≥–∞–∑–æ–º –≤ —Å–µ—Ç–∏ Ethereum. –ù–∞–ø–∏—à–∏ /gas —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ üö¶")

async def gas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}"
    response = requests.get(url).json()

    try:
        safe = response['result']['SafeGasPrice']
        propose = response['result']['ProposeGasPrice']
        fast = response['result']['FastGasPrice']
        message = (
            f"üí® –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ Gwei:\n"
            f"‚Ä¢ üü¢ –ú–µ–¥–ª–µ–Ω–Ω–æ: {safe} Gwei\n"
            f"‚Ä¢ üü° –°—Ä–µ–¥–Ω–µ: {propose} Gwei\n"
            f"‚Ä¢ üî¥ –ë—ã—Å—Ç—Ä–æ: {fast} Gwei"
        )
    except Exception:
        message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ üòì"

    await update.message.reply_text(message)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("gas", gas))
    app.run_polling()
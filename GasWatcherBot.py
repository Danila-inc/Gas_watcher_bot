import os
import logging
from threading import Thread
from aiohttp import web
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    JobQueue,
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")
user_thresholds = {}

# --- Health Check –¥–ª—è Render ---
async def health_check(request):
    return web.Response(text="Gas Bot is OK")

def run_health_check():
    app = web.Application()
    app.router.add_get("/", health_check)
    web.run_app(app, port=8080, host='0.0.0.0')

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîî –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–∞–∑–∞ Ethereum\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/gas - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n"
        "/set <—á–∏—Å–ª–æ> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5)\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )

async def gas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gas_price = await get_gas_price()
    if not gas_price:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return
    
    safe, propose, fast = gas_price
    await update.message.reply_text(
        f"‚õΩÔ∏è –¢–µ–∫—É—â–∏–π –≥–∞–∑ (Gwei):\n"
        f"‚Ä¢ üü¢ Safe: {safe:.1f}\n"
        f"‚Ä¢ üü° Propose: {propose:.1f}\n"
        f"‚Ä¢ üî¥ Fast: {fast:.1f}"
    )

async def set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    try:
        threshold = round(float(context.args[0]), 2)
        if threshold <= 0:
            await update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª—è
        if chat_id in user_thresholds and user_thresholds[chat_id] == threshold:
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ—Ä–æ–≥ —É–∂–µ {threshold:.2f} Gwei")
            return
            
    except (IndexError, ValueError, TypeError):
        await update.message.reply_text("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /set <—á–∏—Å–ª–æ> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.7)")
        return

    gas_price = await get_gas_price()
    if not gas_price:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return

    safe_gas = gas_price[0]
    user_thresholds[chat_id] = threshold

    if safe_gas <= threshold:
        await update.message.reply_text(f"üö® –£–∂–µ {safe_gas:.2f} ‚â§ {threshold:.2f} Gwei!")
        return

    if 'job' in context.chat_data:
        context.chat_data['job'].schedule_removal()

    job = context.job_queue.run_repeating(
        check_gas,
        interval=60.0,
        first=10.0,
        chat_id=chat_id,
        data={'threshold': threshold}
    )
    context.chat_data['job'] = job

    await update.message.reply_text(
        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥: {threshold:.2f} Gwei\n"
        f"–¢–µ–∫—É—â–∏–π: {safe_gas:.2f} Gwei\n"
        f"–£–≤–µ–¥–æ–º–ª—é –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –¥–æ ‚â§ {threshold:.2f}!"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    if chat_id in user_thresholds:
        del user_thresholds[chat_id]
    
    if 'job' in context.chat_data:
        context.chat_data['job'].schedule_removal()
        del context.chat_data['job']
    
    await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")

async def check_gas(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    threshold = job.data['threshold']
    
    gas_price = await get_gas_price()
    if not gas_price:
        return

    safe_gas = gas_price[0]
    
    if safe_gas <= threshold:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üö® –ì–∞–∑ {safe_gas:.2f} ‚â§ {threshold:.2f} Gwei!"
        )
        job.schedule_removal()
        if chat_id in user_thresholds:
            del user_thresholds[chat_id]

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞ ---
async def get_gas_price():
    try:
        url = f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}"
        response = requests.get(url, timeout=10)
        data = response.json()
        
        if data.get("status") != "1":
            raise ValueError("API error")
            
        return (
            float(data['result']['SafeGasPrice']),
            float(data['result']['ProposeGasPrice']),
            float(data['result']['FastGasPrice'])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return None

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    # Health Check –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = Thread(target=run_health_check)
    health_thread.daemon = True
    health_thread.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder() \
        .token(TOKEN) \
        .job_queue(JobQueue()) \
        .build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler("start", start),
        CommandHandler("gas", gas),
        CommandHandler("set", set_threshold),
        CommandHandler("cancel", cancel)
    ]
    for handler in handlers:
        application.add_handler(handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    application.run_polling(
        poll_interval=5,
        timeout=30,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()
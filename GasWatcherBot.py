from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import asyncio
import os

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –ø–æ chat_id
thresholds = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ –≥–∞–∑–æ–º –≤ —Å–µ—Ç–∏ Ethereum. –ù–∞–ø–∏—à–∏ /gas —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ üö¶")

async def gas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gas_info = get_gas_info()
    if gas_info:
        safe, propose, fast = gas_info
        message = (
            f"üí® –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ Gwei:\n"
            f"‚Ä¢ üü¢ –ú–µ–¥–ª–µ–Ω–Ω–æ: {safe} Gwei\n"
            f"‚Ä¢ üü° –°—Ä–µ–¥–Ω–µ: {propose} Gwei\n"
            f"‚Ä¢ üî¥ –ë—ã—Å—Ç—Ä–æ: {fast} Gwei"
        )
    else:
        message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ üòì"

    await update.message.reply_text(message)

async def set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        value = int(context.args[0])
        thresholds[chat_id] = value
        print(f"[INFO] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä–æ–≥ {value} Gwei –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        await update.message.reply_text(f"–ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≥–∞–∑–æ–º –∏ –¥–∞–º –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –¥–æ {value} Gwei üö¶")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ: /set <—á–∏—Å–ª–æ>")

async def cancel_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in thresholds:
        del thresholds[chat_id]
        print(f"[INFO] –û—Ç–º–µ–Ω–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        await update.message.reply_text("–û–∫–µ–π, –±–æ–ª—å—à–µ –Ω–µ —Å–ª–µ–∂—É –∑–∞ –≥–∞–∑–æ–º ‚ùå")
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

def get_gas_info():
    try:
        url = f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}"
        response = requests.get(url).json()
        result = response["result"]
        return int(result["SafeGasPrice"]), int(result["ProposeGasPrice"]), int(result["FastGasPrice"])
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≥–∞–∑–∞: {e}")
        return None

async def monitor_gas(app):
    while True:
        gas_info = get_gas_info()
        if gas_info:
            _, propose, _ = gas_info
            for chat_id, threshold in list(thresholds.items()):
                if propose <= threshold:
                    print(f"[INFO] Gwei ({propose}) <= –ø–æ—Ä–æ–≥ ({threshold}) ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
                    await app.bot.send_message(chat_id=chat_id, text=f"üö® –¶–µ–Ω–∞ –≥–∞–∑–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ {propose} Gwei! –≠—Ç–æ –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ {threshold} Gwei.")
                    del thresholds[chat_id]
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("gas", gas))
    app.add_handler(CommandHandler("set", set_threshold))
    app.add_handler(CommandHandler("cancel", cancel_threshold))

    app.job_queue.run_once(lambda *_: asyncio.create_task(monitor_gas(app)), 0)

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

import os
import requests
import asyncio
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, JobQueue, Job
)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ETHERSCAN_API_KEY = os.getenv("ETHERSCAN_API_KEY")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –ø–æ chat_id
thresholds = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /set <—á–∏—Å–ª–æ> —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–∞–∑–µ ‚õΩÔ∏è\n"
        "–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."
    )

async def gas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gas_price = await get_gas_price()
    if gas_price is None:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ üòì")
        return
    safe, propose, fast = gas_price
    await update.message.reply_text(
        f"üí® –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ Gwei:\n"
        f"‚Ä¢ üü¢ –ú–µ–¥–ª–µ–Ω–Ω–æ: {safe}\n"
        f"‚Ä¢ üü° –°—Ä–µ–¥–Ω–µ: {propose}\n"
        f"‚Ä¢ üî¥ –ë—ã—Å—Ç—Ä–æ: {fast}"
    )

async def set_threshold(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set 5")
        return
    threshold = int(context.args[0])
    thresholds[chat_id] = threshold
    await update.message.reply_text(f"–ë—É–¥—É —Å–ª–∞—Ç—å –ø—É—à, –∫–æ–≥–¥–∞ –≥–∞–∑ —Å—Ç–∞–Ω–µ—Ç ‚â§ {threshold} Gwei")

    job_queue: JobQueue = context.job_queue
    job_name = f"monitor_{chat_id}"

    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    old_job = job_queue.get_jobs_by_name(job_name)
    for job in old_job:
        job.schedule_removal()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    job_queue.run_repeating(callback=check_gas_and_notify, interval=60, first=0, name=job_name, data=chat_id)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    job_name = f"monitor_{chat_id}"
    jobs = context.job_queue.get_jobs_by_name(job_name)
    for job in jobs:
        job.schedule_removal()
    if chat_id in thresholds:
        del thresholds[chat_id]
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–∞–∑–∞!")

async def check_gas_and_notify(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data
    if chat_id not in thresholds:
        return
    threshold = thresholds[chat_id]
    gas_price = await get_gas_price()
    if gas_price is None:
        return
    safe, _, _ = gas_price
    if int(safe) <= threshold:
        await context.bot.send_message(chat_id, f"üö® –ì–∞–∑ —Å–µ–π—á–∞—Å {safe} Gwei, —á—Ç–æ ‚â§ –ø–æ—Ä–æ–≥–∞ {threshold}!")

async def get_gas_price():
    try:
        if not ETHERSCAN_API_KEY:
            print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ETHERSCAN_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return None

        url = f"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey={ETHERSCAN_API_KEY}"
        response = requests.get(url)
        print(f"üåê –û—Ç–≤–µ—Ç –æ—Ç Etherscan: {response.status_code}, {response.text}")
        data = response.json()

        if data.get("status") != "1":
            print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Etherscan: {data}")
            return None

        result = data['result']
        return int(result['SafeGasPrice']), int(result['ProposeGasPrice']), int(result['FastGasPrice'])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≥–∞–∑–∞: {e}")
        return None

if __name__ == "__main__":
    async def unset_webhook():
        bot = Bot(token=TOKEN)
        await bot.delete_webhook(drop_pending_updates=True)
        print("üîß –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –±—ã–ª)")

    asyncio.run(unset_webhook())

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("gas", gas))
    app.add_handler(CommandHandler("set", set_threshold))
    app.add_handler(CommandHandler("cancel", cancel))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
    app.run_polling()
